{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport usePageContext from '../shared/hooks/usePageContext';\nimport useResolver from '../shared/hooks/useResolver';\nimport { cancelRunningTask, isCancelException, makePageCallback } from '../shared/utils';\nexport default function PageSVG() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const {\n    _className,\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderError: onRenderErrorProps,\n    page,\n    rotate,\n    scale\n  } = pageContext;\n  const [svgState, svgDispatch] = useResolver();\n  const {\n    value: svg,\n    error: svgError\n  } = svgState;\n  invariant(page, 'Attempted to render page SVG, but no page was specified.');\n  /**\n   * Called when a page is rendered successfully\n   */\n\n  function onRenderSuccess() {\n    if (!page) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (onRenderSuccessProps) {\n      onRenderSuccessProps(makePageCallback(page, scale));\n    }\n  }\n  /**\n   * Called when a page fails to render\n   */\n\n\n  function onRenderError() {\n    if (!svgError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (isCancelException(svgError)) {\n      return;\n    }\n\n    warning(false, svgError.toString());\n\n    if (onRenderErrorProps) {\n      onRenderErrorProps(svgError);\n    }\n  }\n\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n\n  function resetSVG() {\n    svgDispatch({\n      type: 'RESET'\n    });\n  }\n\n  useEffect(resetSVG, [page, svgDispatch, viewport]);\n\n  function renderSVG() {\n    if (!page) {\n      return;\n    }\n\n    const cancellable = makeCancellable(page.getOperatorList());\n    cancellable.promise.then(operatorList => {\n      const svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n      svgGfx.getSVG(operatorList, viewport).then(nextSvg => {\n        svgDispatch({\n          type: 'RESOLVE',\n          value: nextSvg\n        });\n      }).catch(error => {\n        svgDispatch({\n          type: 'REJECT',\n          error\n        });\n      });\n    }).catch(error => {\n      svgDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(cancellable);\n  }\n\n  useEffect(renderSVG, [page, svgDispatch, viewport]);\n  useEffect(() => {\n    if (svg === undefined) {\n      return;\n    }\n\n    if (svg === false) {\n      onRenderError();\n      return;\n    }\n\n    onRenderSuccess();\n  }, // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [svg]);\n\n  function drawPageOnContainer(element) {\n    if (!element || !svg) {\n      return;\n    } // Append SVG element to the main container, if this hasn't been done already\n\n\n    if (!element.firstElementChild) {\n      element.appendChild(svg);\n    }\n\n    const {\n      width,\n      height\n    } = viewport;\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n  }\n\n  const {\n    width,\n    height\n  } = viewport;\n  return React.createElement(\"div\", {\n    className: `${_className}__svg`,\n    // Note: This cannot be shortened, as we need this function to be called with each render.\n    ref: ref => drawPageOnContainer(ref),\n    style: {\n      display: 'block',\n      backgroundColor: 'white',\n      overflow: 'hidden',\n      width,\n      height,\n      userSelect: 'none'\n    }\n  });\n}","map":{"version":3,"names":["React","useEffect","useMemo","makeCancellable","invariant","warning","pdfjs","usePageContext","useResolver","cancelRunningTask","isCancelException","makePageCallback","PageSVG","pageContext","_className","onRenderSuccess","onRenderSuccessProps","onRenderError","onRenderErrorProps","page","rotate","scale","svgState","svgDispatch","value","svg","error","svgError","toString","viewport","getViewport","rotation","resetSVG","type","renderSVG","cancellable","getOperatorList","promise","then","operatorList","svgGfx","SVGGraphics","commonObjs","objs","getSVG","nextSvg","catch","undefined","drawPageOnContainer","element","firstElementChild","appendChild","width","height","setAttribute","createElement","className","ref","style","display","backgroundColor","overflow","userSelect"],"sources":["/Users/mengfanwang/Desktop/mengfw.github.io/node_modules/react-pdf/dist/esm/Page/PageSVG.js"],"sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport usePageContext from '../shared/hooks/usePageContext';\nimport useResolver from '../shared/hooks/useResolver';\nimport { cancelRunningTask, isCancelException, makePageCallback } from '../shared/utils';\nexport default function PageSVG() {\n    const pageContext = usePageContext();\n    invariant(pageContext, 'Unable to find Page context.');\n    const { _className, onRenderSuccess: onRenderSuccessProps, onRenderError: onRenderErrorProps, page, rotate, scale, } = pageContext;\n    const [svgState, svgDispatch] = useResolver();\n    const { value: svg, error: svgError } = svgState;\n    invariant(page, 'Attempted to render page SVG, but no page was specified.');\n    /**\n     * Called when a page is rendered successfully\n     */\n    function onRenderSuccess() {\n        if (!page) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (onRenderSuccessProps) {\n            onRenderSuccessProps(makePageCallback(page, scale));\n        }\n    }\n    /**\n     * Called when a page fails to render\n     */\n    function onRenderError() {\n        if (!svgError) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (isCancelException(svgError)) {\n            return;\n        }\n        warning(false, svgError.toString());\n        if (onRenderErrorProps) {\n            onRenderErrorProps(svgError);\n        }\n    }\n    const viewport = useMemo(() => page.getViewport({ scale, rotation: rotate }), [page, rotate, scale]);\n    function resetSVG() {\n        svgDispatch({ type: 'RESET' });\n    }\n    useEffect(resetSVG, [page, svgDispatch, viewport]);\n    function renderSVG() {\n        if (!page) {\n            return;\n        }\n        const cancellable = makeCancellable(page.getOperatorList());\n        cancellable.promise\n            .then((operatorList) => {\n            const svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n            svgGfx\n                .getSVG(operatorList, viewport)\n                .then((nextSvg) => {\n                svgDispatch({ type: 'RESOLVE', value: nextSvg });\n            })\n                .catch((error) => {\n                svgDispatch({ type: 'REJECT', error });\n            });\n        })\n            .catch((error) => {\n            svgDispatch({ type: 'REJECT', error });\n        });\n        return () => cancelRunningTask(cancellable);\n    }\n    useEffect(renderSVG, [page, svgDispatch, viewport]);\n    useEffect(() => {\n        if (svg === undefined) {\n            return;\n        }\n        if (svg === false) {\n            onRenderError();\n            return;\n        }\n        onRenderSuccess();\n    }, \n    // Ommitted callbacks so they are not called every time they change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [svg]);\n    function drawPageOnContainer(element) {\n        if (!element || !svg) {\n            return;\n        }\n        // Append SVG element to the main container, if this hasn't been done already\n        if (!element.firstElementChild) {\n            element.appendChild(svg);\n        }\n        const { width, height } = viewport;\n        svg.setAttribute('width', `${width}`);\n        svg.setAttribute('height', `${height}`);\n    }\n    const { width, height } = viewport;\n    return (React.createElement(\"div\", { className: `${_className}__svg`, \n        // Note: This cannot be shortened, as we need this function to be called with each render.\n        ref: (ref) => drawPageOnContainer(ref), style: {\n            display: 'block',\n            backgroundColor: 'white',\n            overflow: 'hidden',\n            width,\n            height,\n            userSelect: 'none',\n        } }));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}