{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","combineHooksSlotProps","preventDefault","event","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","value","valueProp","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","Array","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","_option$disabled","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","createHandleButtonClick","otherHandlers","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","action","buttonClick","_getOptionByValue","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","getSelectTriggerProps","role","getButtonProps","listboxAndButtonProps","combinedProps","getListboxProps","onMouseDown","useDebugValue","selectValue","length"],"sources":["/Users/mengfanwang/Desktop/mengfw.github.io/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (otherHandlers = {}) => {\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}