{"ast":null,"code":"import { HEADING_PATTERN, PDF_ROLE_TO_HTML_ROLE } from './constants';\nexport function isPdfRole(role) {\n  return role in PDF_ROLE_TO_HTML_ROLE;\n}\nexport function isStructTreeNode(node) {\n  return 'children' in node;\n}\nexport function isStructTreeNodeWithOnlyContentChild(node) {\n  if (!isStructTreeNode(node)) {\n    return false;\n  }\n\n  return node.children.length === 1 && 0 in node.children && 'id' in node.children[0];\n}\nexport function getRoleAttributes(node) {\n  const attributes = {};\n\n  if (isStructTreeNode(node)) {\n    const {\n      role\n    } = node;\n    const matches = role.match(HEADING_PATTERN);\n\n    if (matches) {\n      attributes.role = 'heading';\n      attributes['aria-level'] = Number(matches[1]);\n    } else if (isPdfRole(role)) {\n      const htmlRole = PDF_ROLE_TO_HTML_ROLE[role];\n\n      if (htmlRole) {\n        attributes.role = htmlRole;\n      }\n    }\n  }\n\n  return attributes;\n}\nexport function getBaseAttributes(node) {\n  const attributes = {};\n\n  if (isStructTreeNode(node)) {\n    if (node.alt !== undefined) {\n      attributes['aria-label'] = node.alt;\n    }\n\n    if (node.lang !== undefined) {\n      attributes.lang = node.lang;\n    }\n\n    if (isStructTreeNodeWithOnlyContentChild(node)) {\n      const [child] = node.children;\n\n      if (child) {\n        const childAttributes = getBaseAttributes(child);\n        return Object.assign(Object.assign({}, attributes), childAttributes);\n      }\n    }\n  } else {\n    if ('id' in node) {\n      attributes['aria-owns'] = node.id;\n    }\n  }\n\n  return attributes;\n}\nexport function getAttributes(node) {\n  if (!node) {\n    return null;\n  }\n\n  return Object.assign(Object.assign({}, getRoleAttributes(node)), getBaseAttributes(node));\n}","map":{"version":3,"names":["HEADING_PATTERN","PDF_ROLE_TO_HTML_ROLE","isPdfRole","role","isStructTreeNode","node","isStructTreeNodeWithOnlyContentChild","children","length","getRoleAttributes","attributes","matches","match","Number","htmlRole","getBaseAttributes","alt","undefined","lang","child","childAttributes","Object","assign","id","getAttributes"],"sources":["/Users/mengfanwang/Desktop/mengfw.github.io/node_modules/react-pdf/dist/esm/shared/structTreeUtils.js"],"sourcesContent":["import { HEADING_PATTERN, PDF_ROLE_TO_HTML_ROLE } from './constants';\nexport function isPdfRole(role) {\n    return role in PDF_ROLE_TO_HTML_ROLE;\n}\nexport function isStructTreeNode(node) {\n    return 'children' in node;\n}\nexport function isStructTreeNodeWithOnlyContentChild(node) {\n    if (!isStructTreeNode(node)) {\n        return false;\n    }\n    return node.children.length === 1 && 0 in node.children && 'id' in node.children[0];\n}\nexport function getRoleAttributes(node) {\n    const attributes = {};\n    if (isStructTreeNode(node)) {\n        const { role } = node;\n        const matches = role.match(HEADING_PATTERN);\n        if (matches) {\n            attributes.role = 'heading';\n            attributes['aria-level'] = Number(matches[1]);\n        }\n        else if (isPdfRole(role)) {\n            const htmlRole = PDF_ROLE_TO_HTML_ROLE[role];\n            if (htmlRole) {\n                attributes.role = htmlRole;\n            }\n        }\n    }\n    return attributes;\n}\nexport function getBaseAttributes(node) {\n    const attributes = {};\n    if (isStructTreeNode(node)) {\n        if (node.alt !== undefined) {\n            attributes['aria-label'] = node.alt;\n        }\n        if (node.lang !== undefined) {\n            attributes.lang = node.lang;\n        }\n        if (isStructTreeNodeWithOnlyContentChild(node)) {\n            const [child] = node.children;\n            if (child) {\n                const childAttributes = getBaseAttributes(child);\n                return Object.assign(Object.assign({}, attributes), childAttributes);\n            }\n        }\n    }\n    else {\n        if ('id' in node) {\n            attributes['aria-owns'] = node.id;\n        }\n    }\n    return attributes;\n}\nexport function getAttributes(node) {\n    if (!node) {\n        return null;\n    }\n    return Object.assign(Object.assign({}, getRoleAttributes(node)), getBaseAttributes(node));\n}\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,qBAA1B,QAAuD,aAAvD;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,OAAOA,IAAI,IAAIF,qBAAf;AACH;AACD,OAAO,SAASG,gBAAT,CAA0BC,IAA1B,EAAgC;EACnC,OAAO,cAAcA,IAArB;AACH;AACD,OAAO,SAASC,oCAAT,CAA8CD,IAA9C,EAAoD;EACvD,IAAI,CAACD,gBAAgB,CAACC,IAAD,CAArB,EAA6B;IACzB,OAAO,KAAP;EACH;;EACD,OAAOA,IAAI,CAACE,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8B,KAAKH,IAAI,CAACE,QAAxC,IAAoD,QAAQF,IAAI,CAACE,QAAL,CAAc,CAAd,CAAnE;AACH;AACD,OAAO,SAASE,iBAAT,CAA2BJ,IAA3B,EAAiC;EACpC,MAAMK,UAAU,GAAG,EAAnB;;EACA,IAAIN,gBAAgB,CAACC,IAAD,CAApB,EAA4B;IACxB,MAAM;MAAEF;IAAF,IAAWE,IAAjB;IACA,MAAMM,OAAO,GAAGR,IAAI,CAACS,KAAL,CAAWZ,eAAX,CAAhB;;IACA,IAAIW,OAAJ,EAAa;MACTD,UAAU,CAACP,IAAX,GAAkB,SAAlB;MACAO,UAAU,CAAC,YAAD,CAAV,GAA2BG,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAjC;IACH,CAHD,MAIK,IAAIT,SAAS,CAACC,IAAD,CAAb,EAAqB;MACtB,MAAMW,QAAQ,GAAGb,qBAAqB,CAACE,IAAD,CAAtC;;MACA,IAAIW,QAAJ,EAAc;QACVJ,UAAU,CAACP,IAAX,GAAkBW,QAAlB;MACH;IACJ;EACJ;;EACD,OAAOJ,UAAP;AACH;AACD,OAAO,SAASK,iBAAT,CAA2BV,IAA3B,EAAiC;EACpC,MAAMK,UAAU,GAAG,EAAnB;;EACA,IAAIN,gBAAgB,CAACC,IAAD,CAApB,EAA4B;IACxB,IAAIA,IAAI,CAACW,GAAL,KAAaC,SAAjB,EAA4B;MACxBP,UAAU,CAAC,YAAD,CAAV,GAA2BL,IAAI,CAACW,GAAhC;IACH;;IACD,IAAIX,IAAI,CAACa,IAAL,KAAcD,SAAlB,EAA6B;MACzBP,UAAU,CAACQ,IAAX,GAAkBb,IAAI,CAACa,IAAvB;IACH;;IACD,IAAIZ,oCAAoC,CAACD,IAAD,CAAxC,EAAgD;MAC5C,MAAM,CAACc,KAAD,IAAUd,IAAI,CAACE,QAArB;;MACA,IAAIY,KAAJ,EAAW;QACP,MAAMC,eAAe,GAAGL,iBAAiB,CAACI,KAAD,CAAzC;QACA,OAAOE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,UAAlB,CAAd,EAA6CU,eAA7C,CAAP;MACH;IACJ;EACJ,CAdD,MAeK;IACD,IAAI,QAAQf,IAAZ,EAAkB;MACdK,UAAU,CAAC,WAAD,CAAV,GAA0BL,IAAI,CAACkB,EAA/B;IACH;EACJ;;EACD,OAAOb,UAAP;AACH;AACD,OAAO,SAASc,aAAT,CAAuBnB,IAAvB,EAA6B;EAChC,IAAI,CAACA,IAAL,EAAW;IACP,OAAO,IAAP;EACH;;EACD,OAAOgB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,iBAAiB,CAACJ,IAAD,CAAnC,CAAd,EAA0DU,iBAAiB,CAACV,IAAD,CAA3E,CAAP;AACH"},"metadata":{},"sourceType":"module"}