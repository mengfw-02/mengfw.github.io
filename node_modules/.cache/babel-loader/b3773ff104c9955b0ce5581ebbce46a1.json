{"ast":null,"code":"import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport mergeRefs from 'merge-refs';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport StructTree from '../StructTree';\nimport usePageContext from '../shared/hooks/usePageContext';\nimport { cancelRunningTask, getDevicePixelRatio, isCancelException, makePageCallback } from '../shared/utils';\nimport { isRef } from '../shared/propTypes';\nconst ANNOTATION_MODE = pdfjs.AnnotationMode;\nexport default function PageCanvas(props) {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const mergedProps = Object.assign(Object.assign({}, pageContext), props);\n  const {\n    _className,\n    canvasBackground,\n    devicePixelRatio: devicePixelRatioProps,\n    onRenderError: onRenderErrorProps,\n    onRenderSuccess: onRenderSuccessProps,\n    page,\n    renderForms,\n    renderTextLayer,\n    rotate,\n    scale\n  } = mergedProps;\n  const {\n    canvasRef\n  } = props;\n  const canvasElement = useRef(null);\n  invariant(page, 'Attempted to render page canvas, but no page was specified.');\n  const devicePixelRatio = devicePixelRatioProps || getDevicePixelRatio();\n  /**\n   * Called when a page is rendered successfully.\n   */\n\n  function onRenderSuccess() {\n    if (!page) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (onRenderSuccessProps) {\n      onRenderSuccessProps(makePageCallback(page, scale));\n    }\n  }\n  /**\n   * Called when a page fails to render.\n   */\n\n\n  function onRenderError(error) {\n    if (isCancelException(error)) {\n      return;\n    }\n\n    warning(false, error.toString());\n\n    if (onRenderErrorProps) {\n      onRenderErrorProps(error);\n    }\n  }\n\n  const renderViewport = useMemo(() => page.getViewport({\n    scale: scale * devicePixelRatio,\n    rotation: rotate\n  }), [devicePixelRatio, page, rotate, scale]);\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n\n  function drawPageOnCanvas() {\n    if (!page) {\n      return;\n    } // Ensures the canvas will be re-rendered from scratch. Otherwise all form data will stay.\n\n\n    page.cleanup();\n    const {\n      current: canvas\n    } = canvasElement;\n\n    if (!canvas) {\n      return;\n    }\n\n    canvas.width = renderViewport.width;\n    canvas.height = renderViewport.height;\n    canvas.style.width = `${Math.floor(viewport.width)}px`;\n    canvas.style.height = `${Math.floor(viewport.height)}px`;\n    canvas.style.visibility = 'hidden';\n    const renderContext = {\n      annotationMode: renderForms ? ANNOTATION_MODE.ENABLE_FORMS : ANNOTATION_MODE.ENABLE,\n      canvasContext: canvas.getContext('2d', {\n        alpha: false\n      }),\n      viewport: renderViewport\n    };\n\n    if (canvasBackground) {\n      renderContext.background = canvasBackground;\n    }\n\n    const cancellable = page.render(renderContext);\n    const runningTask = cancellable;\n    cancellable.promise.then(() => {\n      canvas.style.visibility = '';\n      onRenderSuccess();\n    }).catch(onRenderError);\n    return () => cancelRunningTask(runningTask);\n  }\n\n  useEffect(drawPageOnCanvas, // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [canvasBackground, canvasElement, devicePixelRatio, page, renderForms, renderViewport, viewport]);\n  const cleanup = useCallback(() => {\n    const {\n      current: canvas\n    } = canvasElement;\n    /**\n     * Zeroing the width and height cause most browsers to release graphics\n     * resources immediately, which can greatly reduce memory consumption.\n     */\n\n    if (canvas) {\n      canvas.width = 0;\n      canvas.height = 0;\n    }\n  }, [canvasElement]);\n  useEffect(() => cleanup, [cleanup]);\n  return React.createElement(\"canvas\", {\n    className: `${_className}__canvas`,\n    dir: \"ltr\",\n    ref: mergeRefs(canvasRef, canvasElement),\n    style: {\n      display: 'block',\n      userSelect: 'none'\n    }\n  }, renderTextLayer ? React.createElement(StructTree, null) : null);\n}\nPageCanvas.propTypes = {\n  canvasRef: isRef\n};","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","mergeRefs","invariant","warning","pdfjs","StructTree","usePageContext","cancelRunningTask","getDevicePixelRatio","isCancelException","makePageCallback","isRef","ANNOTATION_MODE","AnnotationMode","PageCanvas","props","pageContext","mergedProps","Object","assign","_className","canvasBackground","devicePixelRatio","devicePixelRatioProps","onRenderError","onRenderErrorProps","onRenderSuccess","onRenderSuccessProps","page","renderForms","renderTextLayer","rotate","scale","canvasRef","canvasElement","error","toString","renderViewport","getViewport","rotation","viewport","drawPageOnCanvas","cleanup","current","canvas","width","height","style","Math","floor","visibility","renderContext","annotationMode","ENABLE_FORMS","ENABLE","canvasContext","getContext","alpha","background","cancellable","render","runningTask","promise","then","catch","createElement","className","dir","ref","display","userSelect","propTypes"],"sources":["/Users/mengfanwang/Desktop/mengfw.github.io/node_modules/react-pdf/dist/esm/Page/PageCanvas.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport mergeRefs from 'merge-refs';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport StructTree from '../StructTree';\nimport usePageContext from '../shared/hooks/usePageContext';\nimport { cancelRunningTask, getDevicePixelRatio, isCancelException, makePageCallback, } from '../shared/utils';\nimport { isRef } from '../shared/propTypes';\nconst ANNOTATION_MODE = pdfjs.AnnotationMode;\nexport default function PageCanvas(props) {\n    const pageContext = usePageContext();\n    invariant(pageContext, 'Unable to find Page context.');\n    const mergedProps = Object.assign(Object.assign({}, pageContext), props);\n    const { _className, canvasBackground, devicePixelRatio: devicePixelRatioProps, onRenderError: onRenderErrorProps, onRenderSuccess: onRenderSuccessProps, page, renderForms, renderTextLayer, rotate, scale, } = mergedProps;\n    const { canvasRef } = props;\n    const canvasElement = useRef(null);\n    invariant(page, 'Attempted to render page canvas, but no page was specified.');\n    const devicePixelRatio = devicePixelRatioProps || getDevicePixelRatio();\n    /**\n     * Called when a page is rendered successfully.\n     */\n    function onRenderSuccess() {\n        if (!page) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (onRenderSuccessProps) {\n            onRenderSuccessProps(makePageCallback(page, scale));\n        }\n    }\n    /**\n     * Called when a page fails to render.\n     */\n    function onRenderError(error) {\n        if (isCancelException(error)) {\n            return;\n        }\n        warning(false, error.toString());\n        if (onRenderErrorProps) {\n            onRenderErrorProps(error);\n        }\n    }\n    const renderViewport = useMemo(() => page.getViewport({ scale: scale * devicePixelRatio, rotation: rotate }), [devicePixelRatio, page, rotate, scale]);\n    const viewport = useMemo(() => page.getViewport({ scale, rotation: rotate }), [page, rotate, scale]);\n    function drawPageOnCanvas() {\n        if (!page) {\n            return;\n        }\n        // Ensures the canvas will be re-rendered from scratch. Otherwise all form data will stay.\n        page.cleanup();\n        const { current: canvas } = canvasElement;\n        if (!canvas) {\n            return;\n        }\n        canvas.width = renderViewport.width;\n        canvas.height = renderViewport.height;\n        canvas.style.width = `${Math.floor(viewport.width)}px`;\n        canvas.style.height = `${Math.floor(viewport.height)}px`;\n        canvas.style.visibility = 'hidden';\n        const renderContext = {\n            annotationMode: renderForms ? ANNOTATION_MODE.ENABLE_FORMS : ANNOTATION_MODE.ENABLE,\n            canvasContext: canvas.getContext('2d', { alpha: false }),\n            viewport: renderViewport,\n        };\n        if (canvasBackground) {\n            renderContext.background = canvasBackground;\n        }\n        const cancellable = page.render(renderContext);\n        const runningTask = cancellable;\n        cancellable.promise\n            .then(() => {\n            canvas.style.visibility = '';\n            onRenderSuccess();\n        })\n            .catch(onRenderError);\n        return () => cancelRunningTask(runningTask);\n    }\n    useEffect(drawPageOnCanvas, \n    // Ommitted callbacks so they are not called every time they change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        canvasBackground,\n        canvasElement,\n        devicePixelRatio,\n        page,\n        renderForms,\n        renderViewport,\n        viewport,\n    ]);\n    const cleanup = useCallback(() => {\n        const { current: canvas } = canvasElement;\n        /**\n         * Zeroing the width and height cause most browsers to release graphics\n         * resources immediately, which can greatly reduce memory consumption.\n         */\n        if (canvas) {\n            canvas.width = 0;\n            canvas.height = 0;\n        }\n    }, [canvasElement]);\n    useEffect(() => cleanup, [cleanup]);\n    return (React.createElement(\"canvas\", { className: `${_className}__canvas`, dir: \"ltr\", ref: mergeRefs(canvasRef, canvasElement), style: {\n            display: 'block',\n            userSelect: 'none',\n        } }, renderTextLayer ? React.createElement(StructTree, null) : null));\n}\nPageCanvas.propTypes = {\n    canvasRef: isRef,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}