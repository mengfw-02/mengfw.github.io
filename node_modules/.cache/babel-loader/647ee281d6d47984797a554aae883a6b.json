{"ast":null,"code":"/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nconst DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\nexport default class LinkService {\n  constructor() {\n    this.externalLinkEnabled = true;\n    this.externalLinkRel = undefined;\n    this.externalLinkTarget = undefined;\n    this.isInPresentationMode = false;\n    this.pdfDocument = undefined;\n    this.pdfViewer = undefined;\n  }\n\n  setDocument(pdfDocument) {\n    this.pdfDocument = pdfDocument;\n  }\n\n  setViewer(pdfViewer) {\n    this.pdfViewer = pdfViewer;\n  }\n\n  setExternalLinkRel(externalLinkRel) {\n    this.externalLinkRel = externalLinkRel;\n  }\n\n  setExternalLinkTarget(externalLinkTarget) {\n    this.externalLinkTarget = externalLinkTarget;\n  }\n\n  setHistory() {// Intentionally empty\n  }\n\n  get pagesCount() {\n    return this.pdfDocument ? this.pdfDocument.numPages : 0;\n  }\n\n  get page() {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    return this.pdfViewer.currentPageNumber || 0;\n  }\n\n  set page(value) {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    this.pdfViewer.currentPageNumber = value;\n  } // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n\n\n  get rotation() {\n    return 0;\n  }\n\n  set rotation(value) {// Intentionally empty\n  }\n\n  goToDestination(dest) {\n    return new Promise(resolve => {\n      invariant(this.pdfDocument, 'PDF document not loaded.');\n      invariant(dest, 'Destination is not specified.');\n\n      if (typeof dest === 'string') {\n        this.pdfDocument.getDestination(dest).then(resolve);\n      } else if (Array.isArray(dest)) {\n        resolve(dest);\n      } else {\n        dest.then(resolve);\n      }\n    }).then(explicitDest => {\n      invariant(Array.isArray(explicitDest), `\"${explicitDest}\" is not a valid destination array.`);\n      const destRef = explicitDest[0];\n      new Promise(resolve => {\n        invariant(this.pdfDocument, 'PDF document not loaded.');\n\n        if (destRef instanceof Object) {\n          this.pdfDocument.getPageIndex(destRef).then(pageIndex => {\n            resolve(pageIndex);\n          }).catch(() => {\n            invariant(false, `\"${destRef}\" is not a valid page reference.`);\n          });\n        } else if (typeof destRef === 'number') {\n          resolve(destRef);\n        } else {\n          invariant(false, `\"${destRef}\" is not a valid destination reference.`);\n        }\n      }).then(pageIndex => {\n        const pageNumber = pageIndex + 1;\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n        this.pdfViewer.scrollPageIntoView({\n          dest: explicitDest,\n          pageIndex,\n          pageNumber\n        });\n      });\n    });\n  }\n\n  navigateTo(dest) {\n    this.goToDestination(dest);\n  }\n\n  goToPage(pageNumber) {\n    const pageIndex = pageNumber - 1;\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n    this.pdfViewer.scrollPageIntoView({\n      pageIndex,\n      pageNumber\n    });\n  }\n\n  addLinkAttributes(link, url, newWindow) {\n    link.href = url;\n    link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n    link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n  }\n\n  getDestinationHash() {\n    return '#';\n  }\n\n  getAnchorUrl() {\n    return '#';\n  }\n\n  setHash() {// Intentionally empty\n  }\n\n  executeNamedAction() {// Intentionally empty\n  }\n\n  cachePageRef() {// Intentionally empty\n  }\n\n  isPageVisible() {\n    return true;\n  }\n\n  isPageCached() {\n    return true;\n  }\n\n  executeSetOCGState() {// Intentionally empty\n  }\n\n}","map":{"version":3,"names":["invariant","DEFAULT_LINK_REL","LinkService","constructor","externalLinkEnabled","externalLinkRel","undefined","externalLinkTarget","isInPresentationMode","pdfDocument","pdfViewer","setDocument","setViewer","setExternalLinkRel","setExternalLinkTarget","setHistory","pagesCount","numPages","page","currentPageNumber","value","rotation","goToDestination","dest","Promise","resolve","getDestination","then","Array","isArray","explicitDest","destRef","Object","getPageIndex","pageIndex","catch","pageNumber","scrollPageIntoView","navigateTo","goToPage","addLinkAttributes","link","url","newWindow","href","rel","target","getDestinationHash","getAnchorUrl","setHash","executeNamedAction","cachePageRef","isPageVisible","isPageCached","executeSetOCGState"],"sources":["/Users/mengfanwang/Desktop/mengfw.github.io/node_modules/react-pdf/dist/esm/LinkService.js"],"sourcesContent":["/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nconst DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\nexport default class LinkService {\n    constructor() {\n        this.externalLinkEnabled = true;\n        this.externalLinkRel = undefined;\n        this.externalLinkTarget = undefined;\n        this.isInPresentationMode = false;\n        this.pdfDocument = undefined;\n        this.pdfViewer = undefined;\n    }\n    setDocument(pdfDocument) {\n        this.pdfDocument = pdfDocument;\n    }\n    setViewer(pdfViewer) {\n        this.pdfViewer = pdfViewer;\n    }\n    setExternalLinkRel(externalLinkRel) {\n        this.externalLinkRel = externalLinkRel;\n    }\n    setExternalLinkTarget(externalLinkTarget) {\n        this.externalLinkTarget = externalLinkTarget;\n    }\n    setHistory() {\n        // Intentionally empty\n    }\n    get pagesCount() {\n        return this.pdfDocument ? this.pdfDocument.numPages : 0;\n    }\n    get page() {\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        return this.pdfViewer.currentPageNumber || 0;\n    }\n    set page(value) {\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        this.pdfViewer.currentPageNumber = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n    get rotation() {\n        return 0;\n    }\n    set rotation(value) {\n        // Intentionally empty\n    }\n    goToDestination(dest) {\n        return new Promise((resolve) => {\n            invariant(this.pdfDocument, 'PDF document not loaded.');\n            invariant(dest, 'Destination is not specified.');\n            if (typeof dest === 'string') {\n                this.pdfDocument.getDestination(dest).then(resolve);\n            }\n            else if (Array.isArray(dest)) {\n                resolve(dest);\n            }\n            else {\n                dest.then(resolve);\n            }\n        }).then((explicitDest) => {\n            invariant(Array.isArray(explicitDest), `\"${explicitDest}\" is not a valid destination array.`);\n            const destRef = explicitDest[0];\n            new Promise((resolve) => {\n                invariant(this.pdfDocument, 'PDF document not loaded.');\n                if (destRef instanceof Object) {\n                    this.pdfDocument\n                        .getPageIndex(destRef)\n                        .then((pageIndex) => {\n                        resolve(pageIndex);\n                    })\n                        .catch(() => {\n                        invariant(false, `\"${destRef}\" is not a valid page reference.`);\n                    });\n                }\n                else if (typeof destRef === 'number') {\n                    resolve(destRef);\n                }\n                else {\n                    invariant(false, `\"${destRef}\" is not a valid destination reference.`);\n                }\n            }).then((pageIndex) => {\n                const pageNumber = pageIndex + 1;\n                invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n                invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n                this.pdfViewer.scrollPageIntoView({\n                    dest: explicitDest,\n                    pageIndex,\n                    pageNumber,\n                });\n            });\n        });\n    }\n    navigateTo(dest) {\n        this.goToDestination(dest);\n    }\n    goToPage(pageNumber) {\n        const pageIndex = pageNumber - 1;\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n        this.pdfViewer.scrollPageIntoView({\n            pageIndex,\n            pageNumber,\n        });\n    }\n    addLinkAttributes(link, url, newWindow) {\n        link.href = url;\n        link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n        link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n    }\n    getDestinationHash() {\n        return '#';\n    }\n    getAnchorUrl() {\n        return '#';\n    }\n    setHash() {\n        // Intentionally empty\n    }\n    executeNamedAction() {\n        // Intentionally empty\n    }\n    cachePageRef() {\n        // Intentionally empty\n    }\n    isPageVisible() {\n        return true;\n    }\n    isPageCached() {\n        return true;\n    }\n    executeSetOCGState() {\n        // Intentionally empty\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}